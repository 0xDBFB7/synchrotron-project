## examples/xafs/doc_deconv4.lar
# while inotifywait -e close_write *.lar ../../larch/xafs/*.py; do larch --exec doc_deconv4.lar; done


from numpy import genfromtxt
import scipy
#enguage digitizer
input_data = genfromtxt('./resolving_power/ZnS_theoretical_0_1eV_broadening.csv', delimiter=',', skip_header=1) # there's room for improvement on both traces
# print(np.shape(input_data))
energies = input_data[:,0]
# energies = np.concatenate((np.array([161, 161.5, 162]), energies))
theory = input_data[:,1]
experiment = input_data[:,2]

experiment -= experiment[0]

series = np.linspace(energies[0], energies[-1], 1000)
experiment = scipy.interpolate.interp1d(energies, experiment, kind='cubic', fill_value='extrapolate')(series)
theory = scipy.interpolate.interp1d(energies, theory, kind='cubic', fill_value='extrapolate')(series)
energies = series




data = group(energy=energies,mu=experiment)

# pre_edge(data)
pre_edge(data, e0=162, pre1=162, pre2=162)

# pre_edge(data)
autobk(data, rbkg=1.1, kweight=2)
xftf(data, kmin=2, kmax=17, dk=5, kwindow='kaiser', kweight=2)


# data.mu = 


# data.mu = smooth(data.energy, data.mu, sigma=0.1)
# data.norm = smooth(data.energy, data.norm, sigma=0.1)


data.mu -= data.mu[0]
data.norm -= data.norm[0]

data.mu /= np.max(data.mu)

data.norm = data.mu

plot(data.energy, data.norm, label='Original',  win=1)

# data = read_ascii('/home/arthurdent/Programs/xraylarch/examples/xafsdata/cu_metal_rt.xdi', labels='energy i0 i1 mu')

# pre_edge(data)
# autobk(data, rbkg=1.1, kweight=2)
# xftf(data, kmin=2, kmax=17, dk=5, kwindow='kaiser', kweight=2)

# plot(data.energy, data.norm, label='Original',  win=2)

# core_width('Zn', edge='L3')
# xas_iterative_deconvolve(data, esigma=0.4, regularization_filter_width=0.05, max_iterations=50, grid_spacing = 0.005)
xas_iterative_deconvolve(data, esigma=0.5, eshift=0.0, regularization_filter_width=0.005, max_iterations=100, grid_spacing=0.05)
# core_width('Pt', edge='L3')
# xas_deconvolve(data, esigma=3, smooth=False)

# warped_new_uniform_grid, re_sampled_warped_convolved = warp_array(convolved, energies, dE_width)
# unwarped_energies, unwarped = warp_array(re_sampled_warped_convolved, warped_new_uniform_grid, np.flip(dE_width))

plot(data.energy[10:], data.deconv[10:], label='iterative_deconvolved',  win=1)
plot(data.energy[10:], theory[10:], label='iterative_deconvolved',  win=1)
# plot(np.arange(len(data.convergence)), log(data.convergence), label='Convergence',  win=2)



# convergence properties aren't right



input()
## end examples/xafs/doc_deconv3.lar
